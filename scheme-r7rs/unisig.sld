(define-library (unisig)
  (export unisig-read unisig-write)
  (import (scheme base))
  (begin (define magic (bytevector #xDC #xDC #x0D #x0A #x1A #x0A #x00))

         (define (unisig-read)
           (let ((mag (read-bytevector (bytevector-length magic))))
             (and (equal? mag magic)
                  (let* ((lenbyte (read-u8))
                         (uuid? (= lenbyte 0))
                         (len (if uuid? 16 lenbyte))
                         (sig (read-bytevector len)))
                    (and (not (eof-object? sig))
                         (= len (bytevector-length sig))
                         (if uuid? sig (utf8->string sig)))))))

         (define (unisig-write format)
           (let* ((uuid? (cond ((string? format) #f)
                               ((bytevector? format)
                                (or (= 16 (bytevector-length format))
                                    (error "UUID not 16 bytes:" format)))
                               (else (error "Bad format:" format))))
                  (sig (if uuid? format (string->utf8 format))))
             (write-bytevector magic)
             (write-u8 (if uuid? 0 (bytevector-length sig)))
             (write-bytevector sig)
             format))))
