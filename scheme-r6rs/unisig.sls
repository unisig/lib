(library (unisig)
  (export unisig-read unisig-write)
  (import (rnrs))

  (define magic #vu8(#xDC #xDC #x0D #x0A #x1A #x0A #x00))

  (define (unisig-read in)
    (let ((mag (get-bytevector-n in (bytevector-length magic))))
      (and (equal? mag magic)
           (let* ((lenbyte (get-u8 in))
                  (uuid? (= lenbyte 0))
                  (len (if uuid? 16 lenbyte))
                  (sig (get-bytevector-n in len)))
             (and (not (eof-object? sig))
                  (= len (bytevector-length sig))
                  (if uuid? sig (utf8->string sig)))))))

  (define (unisig-write out format)
    (let* ((uuid? (cond ((string? format) #f)
                        ((bytevector? format)
                         (or (= 16 (bytevector-length format))
                             (error "UUID not 16 bytes:" format)))
                        (else (error "Bad format:" format))))
           (sig (if uuid? format (string->utf8 format))))
      (put-bytevector out magic)
      (put-u8 out (if uuid? 0 (bytevector-length sig)))
      (put-bytevector out sig)
      format)))
